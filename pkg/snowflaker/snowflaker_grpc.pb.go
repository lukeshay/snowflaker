// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             (unknown)
// source: proto/snowflaker.proto

package snowflaker

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	SnowflakerService_GetId_FullMethodName = "/snowflaker.SnowflakerService/GetId"
)

// SnowflakerServiceClient is the client API for SnowflakerService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SnowflakerServiceClient interface {
	GetId(ctx context.Context, in *GetIdRequest, opts ...grpc.CallOption) (*GetIdResponse, error)
}

type snowflakerServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewSnowflakerServiceClient(cc grpc.ClientConnInterface) SnowflakerServiceClient {
	return &snowflakerServiceClient{cc}
}

func (c *snowflakerServiceClient) GetId(ctx context.Context, in *GetIdRequest, opts ...grpc.CallOption) (*GetIdResponse, error) {
	out := new(GetIdResponse)
	err := c.cc.Invoke(ctx, SnowflakerService_GetId_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SnowflakerServiceServer is the server API for SnowflakerService service.
// All implementations must embed UnimplementedSnowflakerServiceServer
// for forward compatibility
type SnowflakerServiceServer interface {
	GetId(context.Context, *GetIdRequest) (*GetIdResponse, error)
	mustEmbedUnimplementedSnowflakerServiceServer()
}

// UnimplementedSnowflakerServiceServer must be embedded to have forward compatible implementations.
type UnimplementedSnowflakerServiceServer struct {
}

func (UnimplementedSnowflakerServiceServer) GetId(context.Context, *GetIdRequest) (*GetIdResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetId not implemented")
}
func (UnimplementedSnowflakerServiceServer) mustEmbedUnimplementedSnowflakerServiceServer() {}

// UnsafeSnowflakerServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SnowflakerServiceServer will
// result in compilation errors.
type UnsafeSnowflakerServiceServer interface {
	mustEmbedUnimplementedSnowflakerServiceServer()
}

func RegisterSnowflakerServiceServer(s grpc.ServiceRegistrar, srv SnowflakerServiceServer) {
	s.RegisterService(&SnowflakerService_ServiceDesc, srv)
}

func _SnowflakerService_GetId_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SnowflakerServiceServer).GetId(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SnowflakerService_GetId_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SnowflakerServiceServer).GetId(ctx, req.(*GetIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// SnowflakerService_ServiceDesc is the grpc.ServiceDesc for SnowflakerService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var SnowflakerService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "snowflaker.SnowflakerService",
	HandlerType: (*SnowflakerServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetId",
			Handler:    _SnowflakerService_GetId_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/snowflaker.proto",
}
