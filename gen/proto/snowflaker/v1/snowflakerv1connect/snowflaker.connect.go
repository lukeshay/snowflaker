// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: proto/snowflaker/v1/snowflaker.proto

package snowflakerv1connect

import (
	context "context"
	errors "errors"
	connect_go "github.com/bufbuild/connect-go"
	v1 "github.com/lukeshay/snowflaker/gen/proto/snowflaker/v1"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect_go.IsAtLeastVersion0_1_0

const (
	// SnowflakerServiceName is the fully-qualified name of the SnowflakerService service.
	SnowflakerServiceName = "snowflaker.v1.SnowflakerService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// SnowflakerServiceGetIdProcedure is the fully-qualified name of the SnowflakerService's GetId RPC.
	SnowflakerServiceGetIdProcedure = "/snowflaker.v1.SnowflakerService/GetId"
)

// SnowflakerServiceClient is a client for the snowflaker.v1.SnowflakerService service.
type SnowflakerServiceClient interface {
	GetId(context.Context, *connect_go.Request[v1.GetIdRequest]) (*connect_go.Response[v1.GetIdResponse], error)
}

// NewSnowflakerServiceClient constructs a client for the snowflaker.v1.SnowflakerService service.
// By default, it uses the Connect protocol with the binary Protobuf Codec, asks for gzipped
// responses, and sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the
// connect.WithGRPC() or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewSnowflakerServiceClient(httpClient connect_go.HTTPClient, baseURL string, opts ...connect_go.ClientOption) SnowflakerServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &snowflakerServiceClient{
		getId: connect_go.NewClient[v1.GetIdRequest, v1.GetIdResponse](
			httpClient,
			baseURL+SnowflakerServiceGetIdProcedure,
			opts...,
		),
	}
}

// snowflakerServiceClient implements SnowflakerServiceClient.
type snowflakerServiceClient struct {
	getId *connect_go.Client[v1.GetIdRequest, v1.GetIdResponse]
}

// GetId calls snowflaker.v1.SnowflakerService.GetId.
func (c *snowflakerServiceClient) GetId(ctx context.Context, req *connect_go.Request[v1.GetIdRequest]) (*connect_go.Response[v1.GetIdResponse], error) {
	return c.getId.CallUnary(ctx, req)
}

// SnowflakerServiceHandler is an implementation of the snowflaker.v1.SnowflakerService service.
type SnowflakerServiceHandler interface {
	GetId(context.Context, *connect_go.Request[v1.GetIdRequest]) (*connect_go.Response[v1.GetIdResponse], error)
}

// NewSnowflakerServiceHandler builds an HTTP handler from the service implementation. It returns
// the path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewSnowflakerServiceHandler(svc SnowflakerServiceHandler, opts ...connect_go.HandlerOption) (string, http.Handler) {
	snowflakerServiceGetIdHandler := connect_go.NewUnaryHandler(
		SnowflakerServiceGetIdProcedure,
		svc.GetId,
		opts...,
	)
	return "/snowflaker.v1.SnowflakerService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case SnowflakerServiceGetIdProcedure:
			snowflakerServiceGetIdHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedSnowflakerServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedSnowflakerServiceHandler struct{}

func (UnimplementedSnowflakerServiceHandler) GetId(context.Context, *connect_go.Request[v1.GetIdRequest]) (*connect_go.Response[v1.GetIdResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("snowflaker.v1.SnowflakerService.GetId is not implemented"))
}
